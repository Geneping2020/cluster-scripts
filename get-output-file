#! /bin/bash

if [ $# -ne 1 ]  || [ "$1" == "help" ] ; then
  echo "Usage: $0 JOB_ID"
  echo "    Returns the path to the output file for a running job."
  echo "Arguments:"
  echo "    JOB_ID: (Required) Job to get output file for." 
  echo "            Can be either a job number or a string to match a job name."
  echo "            If it is a pattern that matches more than one job, this script"
  echo "            will not work."
  exit
fi

JOBIDENTIFIER="${1%.*}"
TASKID="${1##*.}"

qstat_out=`qstat -j "$JOBIDENTIFIER"`
qstat_exit_status=$?

if [[ ! qstat_exit_status -eq 0 ]] ; then
	JOBIDENTIFIER="$1"
    qstat_out=`qstat -j "$JOBIDENTIFIER"`
    TASKID=''
fi

# Fragile if path is to different host
# as will spilt on ':' character that is part of path
out_path=`echo "${qstat_out}" |grep ^stdout_path_list|awk '{print $2}'`
out_path=${out_path##*NONE:}

if [ "X$out_path" == "X" ] ; then
  exit
fi

if [ $out_path == "/dev/null" ]; then
  echo "Standard output is not available because directed to /dev/null"
  exit
fi

## probably better ways to check if the path is a directory.
if [ "${out_path: -1}" == "/" ] ; then
    out_path="${out_path}\$JOB_NAME.o\$JOB_ID"
fi

if [[ $out_path == *"\$USER"* ]] ; then
  owner=`echo "${qstat_out}" |grep ^owner|awk '{print $2}'`
  out_path="${out_path//\$USER/$owner}"
fi

# If the user searchs by name, we don't already know the job number
if [[ $out_path == *"\$JOB_ID"* ]] ; then
  job_number=`echo "${qstat_out}" |grep ^job_number|awk '{print $2}'`
  out_path="${out_path//\$JOB_ID/$job_number}"
fi

if [[ $out_path == *"\$JOB_NAME"* ]] ; then
  name=`echo "${qstat_out}" |grep ^job_name|awk '{print $2}'`
  out_path="${out_path//\$JOB_NAME/$name}"
fi

if [[ $out_path == *"\$HOSTNAME"* ]] ; then
    if [[ -z $job_number ]] ; then job_number=`echo "${qstat_out}" |grep ^job_number|awk '{print $2}'` ; fi
    if [[ -z $TASKID ]] ; then
        exec_host=`qstat -u '*'|grep "$job_number" |awk '{print $8}'`
    else
        exec_host=`qstat -u '*'|grep "$job_number" | grep "\b$TASKID\b" |awk '{print $8}'`
    fi
    out_path="${out_path//\$HOSTNAME/${exec_host##*@}}"
fi


## Can't get task id from qstat. (Well, you can, but you don't know which task the user wants.)
if [[ $out_path == *"\$TASK_ID"* ]]  ; then
    if [[ ! -z $TASKID ]] ; then
        out_path="${out_path//\$TASK_ID/$TASKID}"
    else
        echo "Can't get the output path, as that would require the task ID."
        echo "If you want a particular task, pass JOB_NUMBER.TASKID into the script."
        exit 1
    fi
fi

job_cwd=`echo "${qstat_out}" | grep ^cwd | awk '{print $2}'`

if [ ! -z "$job_cwd" ] ; then
  out_path="$job_cwd/$out_path"
fi

echo $out_path

